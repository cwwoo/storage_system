1) concurrence가  중요한 이유는?? 리소스의 원활한 사용을 위해
2) 멀티스레드 기반의 프로그래밍
3) lock, mutex_lock 리눅스는 posix 표준을 준수해서 mutex라고해서 mutex_lock 임
  - 스핀락, 계속기다리는락, 자원의 비효율적인 문제(특히 싱글코어나 cs 의 길이가 길 때 문제)
4) cv = 락의 특수한 형태, cv= 사실상 queue
5) weight 와 signal 함수
6) cv를 library 해놓은 형태가 sema 임
7) deadlock을 해결하기 위해서는 코드의 순서가 중요
8) cs 부분에 reader는 여러개가 접근해도 상관없지만, writer 이 여러개 있을 때는 문제가 됨
9) 식사하는 철학자의 테이블 문제를 해결하기 위해 사이클이 만들어지지 않아야 하며, 한명만 순서를 바꾸면 됨
10) 데드락의 경우 일반적으로 lock은 동일한 순서를 잡음
11) 쓰레드 관리가 좋고, 오버헤드가 없고, 미세컨트롤이 가능(event handling)
12) 단점은 프로그래밍이 어렵고 os에서 해주던 것도 개발자가 처리해야 해서 코딩이 어려워짐
